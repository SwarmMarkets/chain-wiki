/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ERC1155DataStruct = { name: string; symbol: string; kya: string };

export type ERC1155DataStructOutput = [string, string, string] & {
  name: string;
  symbol: string;
  kya: string;
};

export interface SX1155NFTInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EDITOR_ROLE()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "commentatorByCommentsId(uint256,uint256)": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "currentAttestationId()": FunctionFragment;
    "currentTokenId()": FunctionFragment;
    "deleteAttestation(uint256,uint256)": FunctionFragment;
    "forceBurn(address,uint256,uint256,string)": FunctionFragment;
    "forceBurnBatch(address[],uint256[],uint256[],string)": FunctionFragment;
    "forceTransfer(address,address,uint256,uint256)": FunctionFragment;
    "grantEditorRole(address)": FunctionFragment;
    "grantRole(uint256,address)": FunctionFragment;
    "hasRole(address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "kya()": FunctionFragment;
    "makeAttestation(uint256,string)": FunctionFragment;
    "maxArraySize()": FunctionFragment;
    "mint(address,uint256,string)": FunctionFragment;
    "mintBatch(address[],uint256[],string[])": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "revokeEditorRole(address)": FunctionFragment;
    "revokeRole(uint256,address)": FunctionFragment;
    "roleHolderAt(uint256,uint256)": FunctionFragment;
    "roleHolderCount(uint256)": FunctionFragment;
    "roleHolders(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractUri(string)": FunctionFragment;
    "setMaxArraySize(uint256)": FunctionFragment;
    "setRole(address,uint256,bool)": FunctionFragment;
    "setTokenUri(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenCommentByCommentId(uint256,uint256)": FunctionFragment;
    "tokenKya(uint256)": FunctionFragment;
    "tokenUri(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "totalTokenIdsSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EDITOR_ROLE"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "cancelOwnershipHandover"
      | "commentatorByCommentsId"
      | "completeOwnershipHandover"
      | "contractURI"
      | "currentAttestationId"
      | "currentTokenId"
      | "deleteAttestation"
      | "forceBurn"
      | "forceBurnBatch"
      | "forceTransfer"
      | "grantEditorRole"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "kya"
      | "makeAttestation"
      | "maxArraySize"
      | "mint"
      | "mintBatch"
      | "name"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "renounceOwnership"
      | "requestOwnershipHandover"
      | "revokeEditorRole"
      | "revokeRole"
      | "roleHolderAt"
      | "roleHolderCount"
      | "roleHolders"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setContractUri"
      | "setMaxArraySize"
      | "setRole"
      | "setTokenUri"
      | "supportsInterface"
      | "symbol"
      | "tokenCommentByCommentId"
      | "tokenKya"
      | "tokenUri"
      | "totalSupply"
      | "totalTokenIdsSupply"
      | "transferOwnership"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commentatorByCommentsId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAttestationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAttestation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBurn",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBurnBatch",
    values: [string[], BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTransfer",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEditorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "kya", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeAttestation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxArraySize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEditorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHolderAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHolderCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxArraySize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCommentByCommentId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenKya",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenIdsSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commentatorByCommentsId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAttestationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceBurnBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kya", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxArraySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleHolderAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleHolderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxArraySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCommentByCommentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenKya", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenIdsSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CommentRemoved(address,uint256,string,uint256)": EventFragment;
    "Commented(address,uint256,string,uint256)": EventFragment;
    "ContractURISet(address,string)": EventFragment;
    "ForceBurn(address,address,uint256,string)": EventFragment;
    "ForceTransfer(address,address,address,uint256)": EventFragment;
    "KyaUpdated(address,string)": EventFragment;
    "Minted(address,address,uint256,uint256,string)": EventFragment;
    "NewMaxArraySizeSet(uint256)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleSet(address,uint256,bool)": EventFragment;
    "TokenKyaUpdated(address,uint256,string)": EventFragment;
    "TokenURIUpdated(address,uint256,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Commented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KyaUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxArraySizeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenKyaUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  isApproved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CommentRemovedEventObject {
  removedBy: string;
  tokenId: BigNumber;
  comment: string;
  commentId: BigNumber;
}
export type CommentRemovedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  CommentRemovedEventObject
>;

export type CommentRemovedEventFilter = TypedEventFilter<CommentRemovedEvent>;

export interface CommentedEventObject {
  commentator: string;
  tokenId: BigNumber;
  comment: string;
  commentId: BigNumber;
}
export type CommentedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  CommentedEventObject
>;

export type CommentedEventFilter = TypedEventFilter<CommentedEvent>;

export interface ContractURISetEventObject {
  from: string;
  uri: string;
}
export type ContractURISetEvent = TypedEvent<
  [string, string],
  ContractURISetEventObject
>;

export type ContractURISetEventFilter = TypedEventFilter<ContractURISetEvent>;

export interface ForceBurnEventObject {
  issuer: string;
  from: string;
  tokenId: BigNumber;
  reason: string;
}
export type ForceBurnEvent = TypedEvent<
  [string, string, BigNumber, string],
  ForceBurnEventObject
>;

export type ForceBurnEventFilter = TypedEventFilter<ForceBurnEvent>;

export interface ForceTransferEventObject {
  issuer: string;
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type ForceTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  ForceTransferEventObject
>;

export type ForceTransferEventFilter = TypedEventFilter<ForceTransferEvent>;

export interface KyaUpdatedEventObject {
  from: string;
  kya: string;
}
export type KyaUpdatedEvent = TypedEvent<
  [string, string],
  KyaUpdatedEventObject
>;

export type KyaUpdatedEventFilter = TypedEventFilter<KyaUpdatedEvent>;

export interface MintedEventObject {
  minter: string;
  receiver: string;
  tokenId: BigNumber;
  amount: BigNumber;
  uri: string;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface NewMaxArraySizeSetEventObject {
  newMaxArraySize: BigNumber;
}
export type NewMaxArraySizeSetEvent = TypedEvent<
  [BigNumber],
  NewMaxArraySizeSetEventObject
>;

export type NewMaxArraySizeSetEventFilter =
  TypedEventFilter<NewMaxArraySizeSetEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  OwnershipHandoverCanceledEventObject
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  OwnershipHandoverRequestedEventObject
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleSetEventObject {
  holder: string;
  role: BigNumber;
  active: boolean;
}
export type RoleSetEvent = TypedEvent<
  [string, BigNumber, boolean],
  RoleSetEventObject
>;

export type RoleSetEventFilter = TypedEventFilter<RoleSetEvent>;

export interface TokenKyaUpdatedEventObject {
  from: string;
  id: BigNumber;
  kya: string;
}
export type TokenKyaUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenKyaUpdatedEventObject
>;

export type TokenKyaUpdatedEventFilter = TypedEventFilter<TokenKyaUpdatedEvent>;

export interface TokenURIUpdatedEventObject {
  from: string;
  id: BigNumber;
  uri: string;
}
export type TokenURIUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenURIUpdatedEventObject
>;

export type TokenURIUpdatedEventFilter = TypedEventFilter<TokenURIUpdatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  amounts: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  amount: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface SX1155NFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SX1155NFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    burn(
      _id: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    commentatorByCommentsId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { commentator: string }>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    currentAttestationId(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteAttestation(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      holder: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    kya(overrides?: CallOverrides): Promise<[string]>;

    makeAttestation(
      tokenId: BigNumberish,
      comment: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxArraySize(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeEditorRole(
      from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    roleHolderAt(
      role: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    roleHolderCount(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    roleHolders(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractUri(
      _contractUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRole(
      holder: string,
      role: BigNumberish,
      active: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenUri(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenCommentByCommentId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { comment: string }>;

    tokenKya(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokenUri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTokenIdsSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

  EDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    _id: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  commentatorByCommentsId(
    tokenId: BigNumberish,
    commentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  completeOwnershipHandover(
    pendingOwner: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  currentAttestationId(overrides?: CallOverrides): Promise<BigNumber>;

  currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  deleteAttestation(
    tokenId: BigNumberish,
    commentId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceBurn(
    from: string,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceBurnBatch(
    _accounts: string[],
    _tokenIds: BigNumberish[],
    _quantities: BigNumberish[],
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceTransfer(
    from: string,
    to: string,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantEditorRole(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    holder: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kya(overrides?: CallOverrides): Promise<string>;

  makeAttestation(
    tokenId: BigNumberish,
    comment: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _to: string,
    _quantity: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintBatch(
    _accounts: string[],
    _quantities: BigNumberish[],
    _tokenURIs: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeEditorRole(
    from: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  roleHolderAt(
    role: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  roleHolderCount(
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  roleHolders(role: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    isApproved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractUri(
    _contractUri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxArraySize(
    _maxArraySize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRole(
    holder: string,
    role: BigNumberish,
    active: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenUri(
    _id: BigNumberish,
    _uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenCommentByCommentId(
    tokenId: BigNumberish,
    commentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenKya(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenUri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenIdsSupply(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      _id: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    commentatorByCommentsId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    currentAttestationId(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAttestation(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantEditorRole(to: string, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      holder: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kya(overrides?: CallOverrides): Promise<string>;

    makeAttestation(
      tokenId: BigNumberish,
      comment: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    revokeEditorRole(from: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleHolderAt(
      role: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    roleHolderCount(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHolders(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      isApproved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractUri(
      _contractUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRole(
      holder: string,
      role: BigNumberish,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenUri(
      _id: BigNumberish,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenCommentByCommentId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenKya(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenUri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenIdsSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      isApproved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      isApproved?: null
    ): ApprovalForAllEventFilter;

    "CommentRemoved(address,uint256,string,uint256)"(
      removedBy?: null,
      tokenId?: null,
      comment?: null,
      commentId?: null
    ): CommentRemovedEventFilter;
    CommentRemoved(
      removedBy?: null,
      tokenId?: null,
      comment?: null,
      commentId?: null
    ): CommentRemovedEventFilter;

    "Commented(address,uint256,string,uint256)"(
      commentator?: null,
      tokenId?: null,
      comment?: null,
      commentId?: null
    ): CommentedEventFilter;
    Commented(
      commentator?: null,
      tokenId?: null,
      comment?: null,
      commentId?: null
    ): CommentedEventFilter;

    "ContractURISet(address,string)"(
      from?: null,
      uri?: null
    ): ContractURISetEventFilter;
    ContractURISet(from?: null, uri?: null): ContractURISetEventFilter;

    "ForceBurn(address,address,uint256,string)"(
      issuer?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      reason?: null
    ): ForceBurnEventFilter;
    ForceBurn(
      issuer?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      reason?: null
    ): ForceBurnEventFilter;

    "ForceTransfer(address,address,address,uint256)"(
      issuer?: string | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): ForceTransferEventFilter;
    ForceTransfer(
      issuer?: string | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): ForceTransferEventFilter;

    "KyaUpdated(address,string)"(
      from?: null,
      kya?: null
    ): KyaUpdatedEventFilter;
    KyaUpdated(from?: null, kya?: null): KyaUpdatedEventFilter;

    "Minted(address,address,uint256,uint256,string)"(
      minter?: null,
      receiver?: null,
      tokenId?: null,
      amount?: null,
      uri?: null
    ): MintedEventFilter;
    Minted(
      minter?: null,
      receiver?: null,
      tokenId?: null,
      amount?: null,
      uri?: null
    ): MintedEventFilter;

    "NewMaxArraySizeSet(uint256)"(
      newMaxArraySize?: null
    ): NewMaxArraySizeSetEventFilter;
    NewMaxArraySizeSet(newMaxArraySize?: null): NewMaxArraySizeSetEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: string | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: string | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: string | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: string | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleSet(address,uint256,bool)"(
      holder?: string | null,
      role?: BigNumberish | null,
      active?: boolean | null
    ): RoleSetEventFilter;
    RoleSet(
      holder?: string | null,
      role?: BigNumberish | null,
      active?: boolean | null
    ): RoleSetEventFilter;

    "TokenKyaUpdated(address,uint256,string)"(
      from?: null,
      id?: BigNumberish | null,
      kya?: null
    ): TokenKyaUpdatedEventFilter;
    TokenKyaUpdated(
      from?: null,
      id?: BigNumberish | null,
      kya?: null
    ): TokenKyaUpdatedEventFilter;

    "TokenURIUpdated(address,uint256,string)"(
      from?: null,
      id?: BigNumberish | null,
      uri?: null
    ): TokenURIUpdatedEventFilter;
    TokenURIUpdated(
      from?: null,
      id?: BigNumberish | null,
      uri?: null
    ): TokenURIUpdatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _id: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    commentatorByCommentsId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    currentAttestationId(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAttestation(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      holder: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kya(overrides?: CallOverrides): Promise<BigNumber>;

    makeAttestation(
      tokenId: BigNumberish,
      comment: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    revokeEditorRole(
      from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    roleHolderAt(
      role: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHolderCount(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHolders(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractUri(
      _contractUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRole(
      holder: string,
      role: BigNumberish,
      active: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenUri(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCommentByCommentId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenKya(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenUri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenIdsSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _id: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    commentatorByCommentsId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentAttestationId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAttestation(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      holder: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kya(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeAttestation(
      tokenId: BigNumberish,
      comment: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxArraySize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeEditorRole(
      from: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    roleHolderAt(
      role: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHolderCount(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHolders(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      isApproved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractUri(
      _contractUri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRole(
      holder: string,
      role: BigNumberish,
      active: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenUri(
      _id: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCommentByCommentId(
      tokenId: BigNumberish,
      commentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenKya(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenUri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokenIdsSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
