/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type GreylistTransferRequestStruct = {
  from: string;
  to: string;
  tokenId: BigNumberish;
  quantity: BigNumberish;
  valid: boolean;
};

export type GreylistTransferRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  from: string;
  to: string;
  tokenId: BigNumber;
  quantity: BigNumber;
  valid: boolean;
};

export interface SX1155NFTInterface extends utils.Interface {
  functions: {
    "AGENT_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EDITOR_ROLE()": FunctionFragment;
    "ISSUER_ROLE()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "contractURI()": FunctionFragment;
    "currentTokenId()": FunctionFragment;
    "forceBurn(address,uint256,uint256,string)": FunctionFragment;
    "forceBurnBatch(address[],uint256[],uint256[],string)": FunctionFragment;
    "forceTransfer(address,address,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantAgentRole(address)": FunctionFragment;
    "grantEditorRole(address)": FunctionFragment;
    "grantIssuerRole(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "greylistNextReqId()": FunctionFragment;
    "greylistTransferRequests(uint256)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "kya()": FunctionFragment;
    "maxArraySize()": FunctionFragment;
    "mint(address,uint256,string,bytes)": FunctionFragment;
    "mintBatch(address[],uint256[],string[],bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAgentRole(address)": FunctionFragment;
    "revokeEditorRole(address)": FunctionFragment;
    "revokeIssuerRole(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setKya(string)": FunctionFragment;
    "setMaxArraySize(uint256)": FunctionFragment;
    "setTokenKya(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AGENT_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "EDITOR_ROLE"
      | "ISSUER_ROLE"
      | "balanceOf"
      | "balanceOfBatch"
      | "contractURI"
      | "currentTokenId"
      | "forceBurn"
      | "forceBurnBatch"
      | "forceTransfer"
      | "getRoleAdmin"
      | "grantAgentRole"
      | "grantEditorRole"
      | "grantIssuerRole"
      | "grantRole"
      | "greylistNextReqId"
      | "greylistTransferRequests"
      | "hasRole"
      | "isApprovedForAll"
      | "kya"
      | "maxArraySize"
      | "mint"
      | "mintBatch"
      | "name"
      | "renounceRole"
      | "revokeAgentRole"
      | "revokeEditorRole"
      | "revokeIssuerRole"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setContractURI"
      | "setKya"
      | "setMaxArraySize"
      | "setTokenKya"
      | "supportsInterface"
      | "symbol"
      | "tokens"
      | "totalSupply"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AGENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceBurn",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceBurnBatch",
    values: [string[], BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTransfer",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAgentRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEditorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantIssuerRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "greylistNextReqId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "greylistTransferRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "kya", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxArraySize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string[], BigNumberish[], string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAgentRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEditorRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeIssuerRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKya", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxArraySize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenKya",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "AGENT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceBurnBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAgentRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantIssuerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "greylistNextReqId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "greylistTransferRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kya", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxArraySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAgentRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeIssuerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKya", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxArraySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenKya",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ContractURISet(address,string)": EventFragment;
    "ForceBurn(address,address,uint256,string)": EventFragment;
    "ForceTransfer(address,address,address,uint256)": EventFragment;
    "GreylistTransferApproved(uint256,address,uint256)": EventFragment;
    "GreylistTransferCancelled(uint256,address,address,uint256)": EventFragment;
    "GreylistTransferRequestCreated(uint256,address,address,uint256,uint256)": EventFragment;
    "KyaUpdated(address,string)": EventFragment;
    "NewMaxArraySizeSet(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenKyaUpdated(address,uint256,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GreylistTransferApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GreylistTransferCancelled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GreylistTransferRequestCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KyaUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxArraySizeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenKyaUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ContractURISetEventObject {
  from: string;
  uri: string;
}
export type ContractURISetEvent = TypedEvent<
  [string, string],
  ContractURISetEventObject
>;

export type ContractURISetEventFilter = TypedEventFilter<ContractURISetEvent>;

export interface ForceBurnEventObject {
  issuer: string;
  from: string;
  tokenId: BigNumber;
  reason: string;
}
export type ForceBurnEvent = TypedEvent<
  [string, string, BigNumber, string],
  ForceBurnEventObject
>;

export type ForceBurnEventFilter = TypedEventFilter<ForceBurnEvent>;

export interface ForceTransferEventObject {
  issuer: string;
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type ForceTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  ForceTransferEventObject
>;

export type ForceTransferEventFilter = TypedEventFilter<ForceTransferEvent>;

export interface GreylistTransferApprovedEventObject {
  reqId: BigNumber;
  issuer: string;
  tokenId: BigNumber;
}
export type GreylistTransferApprovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GreylistTransferApprovedEventObject
>;

export type GreylistTransferApprovedEventFilter =
  TypedEventFilter<GreylistTransferApprovedEvent>;

export interface GreylistTransferCancelledEventObject {
  reqId: BigNumber;
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type GreylistTransferCancelledEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  GreylistTransferCancelledEventObject
>;

export type GreylistTransferCancelledEventFilter =
  TypedEventFilter<GreylistTransferCancelledEvent>;

export interface GreylistTransferRequestCreatedEventObject {
  reqId: BigNumber;
  from: string;
  to: string;
  tokenId: BigNumber;
  quantity: BigNumber;
}
export type GreylistTransferRequestCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  GreylistTransferRequestCreatedEventObject
>;

export type GreylistTransferRequestCreatedEventFilter =
  TypedEventFilter<GreylistTransferRequestCreatedEvent>;

export interface KyaUpdatedEventObject {
  from: string;
  kya: string;
}
export type KyaUpdatedEvent = TypedEvent<
  [string, string],
  KyaUpdatedEventObject
>;

export type KyaUpdatedEventFilter = TypedEventFilter<KyaUpdatedEvent>;

export interface NewMaxArraySizeSetEventObject {
  newMaxArraySize: BigNumber;
}
export type NewMaxArraySizeSetEvent = TypedEvent<
  [BigNumber],
  NewMaxArraySizeSetEventObject
>;

export type NewMaxArraySizeSetEventFilter =
  TypedEventFilter<NewMaxArraySizeSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenKyaUpdatedEventObject {
  from: string;
  id: BigNumber;
  kya: string;
}
export type TokenKyaUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenKyaUpdatedEventObject
>;

export type TokenKyaUpdatedEventFilter = TypedEventFilter<TokenKyaUpdatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface SX1155NFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SX1155NFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AGENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    currentTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantAgentRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantIssuerRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    greylistNextReqId(overrides?: CallOverrides): Promise<[BigNumber]>;

    greylistTransferRequests(
      reqId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GreylistTransferRequestStructOutput]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kya(overrides?: CallOverrides): Promise<[string]>;

    maxArraySize(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeAgentRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeEditorRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeIssuerRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setContractURI(
      _contract_uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setKya(
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenKya(
      _id: BigNumberish,
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        kya: string;
        uri: string;
        supply: BigNumber;
      }
    >;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  AGENT_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

  ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  forceBurn(
    from: string,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceBurnBatch(
    _accounts: string[],
    _tokenIds: BigNumberish[],
    _quantities: BigNumberish[],
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceTransfer(
    from: string,
    to: string,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantAgentRole(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantEditorRole(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantIssuerRole(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  greylistNextReqId(overrides?: CallOverrides): Promise<BigNumber>;

  greylistTransferRequests(
    reqId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GreylistTransferRequestStructOutput>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kya(overrides?: CallOverrides): Promise<string>;

  maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _to: string,
    _quantity: BigNumberish,
    _tokenURI: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintBatch(
    _accounts: string[],
    _quantities: BigNumberish[],
    _tokenURIs: string[],
    _data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeAgentRole(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeEditorRole(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeIssuerRole(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setContractURI(
    _contract_uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setKya(
    _kya: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxArraySize(
    _maxArraySize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenKya(
    _id: BigNumberish,
    _kya: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      kya: string;
      uri: string;
      supply: BigNumber;
    }
  >;

  totalSupply(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AGENT_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantAgentRole(to: string, overrides?: CallOverrides): Promise<void>;

    grantEditorRole(to: string, overrides?: CallOverrides): Promise<void>;

    grantIssuerRole(to: string, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    greylistNextReqId(overrides?: CallOverrides): Promise<BigNumber>;

    greylistTransferRequests(
      reqId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GreylistTransferRequestStructOutput>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kya(overrides?: CallOverrides): Promise<string>;

    maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAgentRole(account: string, overrides?: CallOverrides): Promise<void>;

    revokeEditorRole(account: string, overrides?: CallOverrides): Promise<void>;

    revokeIssuerRole(account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      _contract_uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKya(_kya: string, overrides?: CallOverrides): Promise<void>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenKya(
      _id: BigNumberish,
      _kya: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        kya: string;
        uri: string;
        supply: BigNumber;
      }
    >;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ContractURISet(address,string)"(
      from?: null,
      uri?: null
    ): ContractURISetEventFilter;
    ContractURISet(from?: null, uri?: null): ContractURISetEventFilter;

    "ForceBurn(address,address,uint256,string)"(
      issuer?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      reason?: null
    ): ForceBurnEventFilter;
    ForceBurn(
      issuer?: string | null,
      from?: string | null,
      tokenId?: BigNumberish | null,
      reason?: null
    ): ForceBurnEventFilter;

    "ForceTransfer(address,address,address,uint256)"(
      issuer?: string | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): ForceTransferEventFilter;
    ForceTransfer(
      issuer?: string | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): ForceTransferEventFilter;

    "GreylistTransferApproved(uint256,address,uint256)"(
      reqId?: BigNumberish | null,
      issuer?: string | null,
      tokenId?: BigNumberish | null
    ): GreylistTransferApprovedEventFilter;
    GreylistTransferApproved(
      reqId?: BigNumberish | null,
      issuer?: string | null,
      tokenId?: BigNumberish | null
    ): GreylistTransferApprovedEventFilter;

    "GreylistTransferCancelled(uint256,address,address,uint256)"(
      reqId?: BigNumberish | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): GreylistTransferCancelledEventFilter;
    GreylistTransferCancelled(
      reqId?: BigNumberish | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null
    ): GreylistTransferCancelledEventFilter;

    "GreylistTransferRequestCreated(uint256,address,address,uint256,uint256)"(
      reqId?: BigNumberish | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null,
      quantity?: null
    ): GreylistTransferRequestCreatedEventFilter;
    GreylistTransferRequestCreated(
      reqId?: BigNumberish | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null,
      quantity?: null
    ): GreylistTransferRequestCreatedEventFilter;

    "KyaUpdated(address,string)"(
      from?: null,
      kya?: null
    ): KyaUpdatedEventFilter;
    KyaUpdated(from?: null, kya?: null): KyaUpdatedEventFilter;

    "NewMaxArraySizeSet(uint256)"(
      newMaxArraySize?: null
    ): NewMaxArraySizeSetEventFilter;
    NewMaxArraySizeSet(newMaxArraySize?: null): NewMaxArraySizeSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokenKyaUpdated(address,uint256,string)"(
      from?: null,
      id?: BigNumberish | null,
      kya?: null
    ): TokenKyaUpdatedEventFilter;
    TokenKyaUpdated(
      from?: null,
      id?: BigNumberish | null,
      kya?: null
    ): TokenKyaUpdatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    AGENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    currentTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAgentRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantIssuerRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    greylistNextReqId(overrides?: CallOverrides): Promise<BigNumber>;

    greylistTransferRequests(
      reqId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kya(overrides?: CallOverrides): Promise<BigNumber>;

    maxArraySize(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeAgentRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeEditorRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeIssuerRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setContractURI(
      _contract_uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setKya(
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenKya(
      _id: BigNumberish,
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AGENT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EDITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceBurn(
      from: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceBurnBatch(
      _accounts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceTransfer(
      from: string,
      to: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAgentRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantEditorRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantIssuerRole(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    greylistNextReqId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    greylistTransferRequests(
      reqId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kya(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxArraySize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _quantity: BigNumberish,
      _tokenURI: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      _accounts: string[],
      _quantities: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeAgentRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeEditorRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeIssuerRole(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _contract_uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setKya(
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxArraySize(
      _maxArraySize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenKya(
      _id: BigNumberish,
      _kya: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
