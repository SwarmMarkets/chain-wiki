/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SX1155NFTFactoryInterface extends utils.Interface {
  functions: {
    "deployNFTContract(string,string,string,address,address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deployNFTContract"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployNFTContract",
    values: [string, string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployNFTContract",
    data: BytesLike
  ): Result;

  events: {
    "SX1155NFTDeployed(address,string,string,string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SX1155NFTDeployed"): EventFragment;
}

export interface SX1155NFTDeployedEventObject {
  deployedAddress: string;
  name: string;
  symbol: string;
  uri: string;
  admin: string;
  editor: string;
}
export type SX1155NFTDeployedEvent = TypedEvent<
  [string, string, string, string, string, string],
  SX1155NFTDeployedEventObject
>;

export type SX1155NFTDeployedEventFilter =
  TypedEventFilter<SX1155NFTDeployedEvent>;

export interface SX1155NFTFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SX1155NFTFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployNFTContract(
      _name: string,
      _symbol: string,
      _uri: string,
      _admin: string,
      _editor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deployNFTContract(
    _name: string,
    _symbol: string,
    _uri: string,
    _admin: string,
    _editor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployNFTContract(
      _name: string,
      _symbol: string,
      _uri: string,
      _admin: string,
      _editor: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "SX1155NFTDeployed(address,string,string,string,address,address)"(
      deployedAddress?: null,
      name?: null,
      symbol?: null,
      uri?: null,
      admin?: null,
      editor?: null
    ): SX1155NFTDeployedEventFilter;
    SX1155NFTDeployed(
      deployedAddress?: null,
      name?: null,
      symbol?: null,
      uri?: null,
      admin?: null,
      editor?: null
    ): SX1155NFTDeployedEventFilter;
  };

  estimateGas: {
    deployNFTContract(
      _name: string,
      _symbol: string,
      _uri: string,
      _admin: string,
      _editor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployNFTContract(
      _name: string,
      _symbol: string,
      _uri: string,
      _admin: string,
      _editor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
